{"ast":null,"code":"var _jsxFileName = \"/home/kristjan/Documents/devx/projects/active/react-cp-projects/2020.07.07-fb-messenger/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport \"./styles.css\";\nimport { Button, Input, Layout, Breadcrumb, Form } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport { Message } from \"./Message\";\nimport { db } from \"./firebase\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Header,\n  Content,\n  Footer\n} = Layout;\nexport const App = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\"); // const [messages, setMessages] = useState<MessageType[]>([])\n\n  const [userName, setUserName] = useState(\"unknown\");\n  const messagesRef = db.collection(\"messages\");\n  const query = messagesRef;\n  const [messages] = useCollectionData(query); // useEffect(() => {\n  //   db.collection(\"messages\").onSnapshot(snap => {\n  //     setMessages(snap.docs.map((doc) =>{\n  //       doc.data()\n  //     }))\n  //   })\n  // },[])\n  // useEffect(() => {\n  //   db.collection(\"messages\").onSnapshot((snap) => {\n  //     snap.docs.map((doc) => {\n  //       console.log(doc.data())\n  //       setMessages([{ text: doc.data().text, userName: doc.data().userName }])\n  //     })\n  //   })\n  // }, [])\n  // setMessages([{ text: doc.data().text, userName: doc.data().userName }])\n\n  useEffect(() => {\n    const userNamePrompt = prompt(\"Please enter your name\");\n\n    if (userNamePrompt) {\n      setUserName(userNamePrompt);\n    }\n  }, []);\n\n  const sendMessage = () => {\n    // evt.preventDefault()\n    // setMessages([...messages, { text: input, userName: userName }])\n    messagesRef.add({\n      text: input,\n      userName: userName\n    });\n    setInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      className: \"layout\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        className: \"site-page-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Messenger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        style: {\n          padding: '0 50px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          style: {\n            margin: '16px 0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Hello, \", userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"site-layout-content\",\n          children: [messages && messages.map(message => {\n            return (\n              /*#__PURE__*/\n              // <p key={Math.random()}>{msg}</p>\n              _jsxDEV(Message, {\n                loggedInUserName: userName,\n                messageObj: message\n              }, Math.random(), false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this)\n            );\n          }), /*#__PURE__*/_jsxDEV(Form.Provider, {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onSubmit: sendMessage,\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  value: input,\n                  onChange: evt => setInput(evt.target.value),\n                  style: {\n                    width: 200\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  disabled: !input,\n                  onClick: sendMessage // shape=\"round\"\n                  ,\n                  type: \"primary\",\n                  icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 27\n                  }, this),\n                  children: \"Send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"2021\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}; // onSubmit={(e: React.SyntheticEvent) => sendMessage}\n// evt: React.MouseEvent | React.KeyboardEvent\n\n_s(App, \"eXRoJNWfsJoCRXAQKYhiwxKQs5s=\", false, function () {\n  return [useCollectionData];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/kristjan/Documents/devx/projects/active/react-cp-projects/2020.07.07-fb-messenger/src/App.tsx"],"names":["useState","useEffect","Button","Input","Layout","Breadcrumb","Form","SendOutlined","Message","db","useCollectionData","Header","Content","Footer","App","input","setInput","userName","setUserName","messagesRef","collection","query","messages","userNamePrompt","prompt","sendMessage","add","text","padding","margin","map","message","Math","random","evt","target","value","width","textAlign"],"mappings":"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","sourcesContent":["import { FC, useState, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport \"./styles.css\"\nimport { Button, Input, Layout, Breadcrumb, Form } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport { Message } from \"./Message\"\nimport { db } from \"./firebase\"\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport User from 'firebase/app'\nimport { MessageType } from \"./types\"\n\n\nconst { Header, Content, Footer } = Layout;\n\nexport const App: FC = () => {\n\n  const [input, setInput] = useState(\"\")\n  // const [messages, setMessages] = useState<MessageType[]>([])\n  const [userName, setUserName] = useState(\"unknown\")\n\n  const messagesRef = db.collection(\"messages\")\n  const query = messagesRef\n  const [messages]: [MessageType[] | undefined, boolean, Error | undefined] = useCollectionData<MessageType>(query)\n\n  // useEffect(() => {\n  //   db.collection(\"messages\").onSnapshot(snap => {\n  //     setMessages(snap.docs.map((doc) =>{\n  //       doc.data()\n  //     }))\n  //   })\n  // },[])\n\n  // useEffect(() => {\n  //   db.collection(\"messages\").onSnapshot((snap) => {\n  //     snap.docs.map((doc) => {\n  //       console.log(doc.data())\n  //       setMessages([{ text: doc.data().text, userName: doc.data().userName }])\n  //     })\n\n  //   })\n\n  // }, [])\n\n\n  // setMessages([{ text: doc.data().text, userName: doc.data().userName }])\n\n  useEffect(() => {\n    const userNamePrompt = prompt(\"Please enter your name\")\n    if (userNamePrompt) {\n      setUserName(userNamePrompt)\n    }\n\n  }, [])\n\n\n  const sendMessage = () => {\n    // evt.preventDefault()\n    // setMessages([...messages, { text: input, userName: userName }])\n\n    messagesRef.add({\n      text: input,\n      userName: userName\n    })\n\n    setInput(\"\")\n  }\n\n  return (\n    <div >\n      <Layout className=\"layout\">\n        <Header className=\"site-page-header\">\n          <div className=\"logo\" />\n          <h1>Messenger</h1>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            {/* <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item> */}\n          </Breadcrumb>\n          <h2>Hello, {userName}</h2>\n          <div className=\"site-layout-content\">\n            {messages && messages.map((message) => {\n              return (\n                // <p key={Math.random()}>{msg}</p>\n                <Message key={Math.random()} loggedInUserName={userName} messageObj={message} />\n              )\n            })}\n            {/* onFormFinish={sendMessage} */}\n            <Form.Provider >\n              <Form  >\n                <div onSubmit={sendMessage}>\n                  <Input\n                    value={input}\n                    onChange={evt => setInput(evt.target.value)}\n                    style={{ width: 200 }}\n                  />\n                  <Button\n                    disabled={!input}\n                    onClick={sendMessage}\n                    // shape=\"round\"\n                    type=\"primary\"\n                    icon={<SendOutlined />}>Send\n                </Button>\n                </div>\n              </Form>\n            </Form.Provider>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>2021</Footer>\n      </Layout>\n\n    </div>\n  );\n}\n\n\n// onSubmit={(e: React.SyntheticEvent) => sendMessage}\n// evt: React.MouseEvent | React.KeyboardEvent"]},"metadata":{},"sourceType":"module"}